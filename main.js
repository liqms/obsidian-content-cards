/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/script/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ContentCardsPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian2 = require("obsidian");

// src/script/TagParsers.ts
var trim = (s) => {
  const trimmed = s.trim();
  return trimmed.length === 0 ? "\u200B" : trimmed;
};
var toClassArray = (input) => {
  input = input.trim();
  if (input[0] != "[" || input[input.length - 1] != "]")
    return [];
  return input.substring(1, input.length - 1).trim().split(/\s*,\s*/);
};
var timelineRegex = /^[ \t]*@card(.+?)(?:^[ \t]*time:(.+?))?(?:^[ \t]*title:(.+?))?(?:^[ \t]*content:(.+?))?(?=^[ \t]*@card)/gimsu;
var TimeLineParser = (source) => {
  source += "\n@card";
  let sourceMatch;
  const parsed = [];
  while ((sourceMatch = timelineRegex.exec(source)) !== null) {
    const cardColor = toClassArray(sourceMatch[1]);
    parsed.push({
      color: cardColor[0],
      time: sourceMatch[2],
      title: sourceMatch[3],
      content: sourceMatch[4]
    });
  }
  return parsed;
};
var highlightblockRegex = /^[ \t]*@card(.+?)(?:^(.+?))?(?=^[ \t]*@card)/gimsu;
var HighlightblockParser = (source) => {
  source += "\n@card";
  let sourceMatch;
  const parsed = [];
  while ((sourceMatch = highlightblockRegex.exec(source)) !== null) {
    const cardColor = toClassArray(sourceMatch[1]);
    parsed.push({
      color: cardColor[0],
      content: sourceMatch[2]
    });
  }
  return parsed;
};
var targetcardRegex = /^[ \t]*@card(.+?)(?:^[ \t]*title:(.+?))?(?:^[ \t]*value:(.+?))?(?:^[ \t]*unit:(.+?))?(?=^[ \t]*@card)/gimsu;
var TargetCardParser = (source) => {
  source += "\n@card";
  let sourceMatch;
  const parsed = [];
  while ((sourceMatch = targetcardRegex.exec(source)) !== null) {
    const cardColor = toClassArray(sourceMatch[1]);
    parsed.push({
      color: cardColor[0],
      title: sourceMatch[2],
      value: sourceMatch[3],
      unit: sourceMatch[4]
    });
  }
  return parsed;
};
var bookcardRegex = /^[ \t]*@card(.+?)(?:^[ \t]*title:(.+?))?(?:^[ \t]*cover:(.+?))?(?:^[ \t]*meta:(.+?))?(?:^[ \t]*introduction:(.+?))?(?=^[ \t]*@card)/gimsu;
var BookCardParser = (source) => {
  source += "\n@card";
  let sourceMatch;
  const parsed = [];
  while ((sourceMatch = bookcardRegex.exec(source)) !== null) {
    parsed.push({
      title: sourceMatch[2],
      cover: trim(sourceMatch[3]),
      meta: sourceMatch[4],
      introduction: sourceMatch[5]
    });
  }
  return parsed;
};
var musiccardRegex = /^[ \t]*@card(.+?)(?:^[ \t]*title:(.+?))?(?:^[ \t]*cover:(.+?))?(?:^[ \t]*meta:(.+?))?(?=^[ \t]*@card)/gimsu;
var MusicCardParser = (source) => {
  source += "\n@card";
  let sourceMatch;
  const parsed = [];
  while ((sourceMatch = musiccardRegex.exec(source)) !== null) {
    parsed.push({
      title: sourceMatch[2],
      cover: trim(sourceMatch[3]),
      meta: sourceMatch[4]
    });
  }
  return parsed;
};
var moviecardRegex = /^[ \t]*@card(.+?)(?:^[ \t]*title:(.+?))?(?:^[ \t]*cover:(.+?))?(?:^[ \t]*meta:(.+?))?(?:^[ \t]*introduction:([\s\S]*))?(?=^[ \t]*@card)/gimsu;
var MovieCardParser = (source) => {
  source += "\n@card";
  let sourceMatch;
  const parsed = [];
  while ((sourceMatch = moviecardRegex.exec(source)) !== null) {
    parsed.push({
      title: sourceMatch[2],
      cover: trim(sourceMatch[3]),
      meta: sourceMatch[4],
      introduction: sourceMatch[5]
    });
  }
  return parsed;
};
var albumcardRegex = /^[ \t]*@card(.+?)(?:^[ \t]*title:(.+?))?(?:^[ \t]*images:(.+?))?(?=^[ \t]*@card)/gimsu;
var AlbumCardParser = (source) => {
  source += "\n@card";
  let sourceMatch;
  const parsed = [];
  while ((sourceMatch = albumcardRegex.exec(source)) !== null) {
    const cardColor = toClassArray(sourceMatch[1]);
    parsed.push({
      color: cardColor[0],
      title: sourceMatch[2],
      images: sourceMatch[3]
    });
  }
  return parsed;
};
var subfieldRegex = /^[ \t]*@card(.+?)?(?=^[ \t]*@card)/gimsu;
var subfieldParser = (source) => {
  source += "\n@card";
  let sourceMatch;
  const parsed = [];
  while ((sourceMatch = subfieldRegex.exec(source)) !== null) {
    parsed.push({
      content: sourceMatch[1]
    });
  }
  return parsed;
};
var namecardRegex = /^[ \t]*@card(.+?)(?:^[ \t]*name:(.+?))?(?:^[ \t]*tags:(.+?))?(?:^[ \t]*remark:(.+?))?(?=^[ \t]*@card)/gimsu;
var toNameStr = (input) => {
  input = input.trim();
  if (input[0] == null)
    return [];
  return input.substring(input.length - 1, input.length).trim().split(/\s*,\s*/);
};
var NameCardParser = (source) => {
  source += "\n@card";
  let sourceMatch;
  const parsed = [];
  while ((sourceMatch = namecardRegex.exec(source)) !== null) {
    const cardColor = toClassArray(sourceMatch[1]);
    const iconX = toNameStr(sourceMatch[2]);
    parsed.push({
      color: cardColor[0],
      name: sourceMatch[2],
      icon: iconX[0],
      tags: sourceMatch[3],
      remark: sourceMatch[4]
    });
  }
  return parsed;
};
var countdownRegex = /^[ \t]*@card(.+?)(?:^[ \t]*title:(.+?))?(?:^[ \t]*type:(.+?))?(?:^[ \t]*time:(.+?))?(?=^[ \t]*@card)/gimsu;
var CountdownCardParser = (source) => {
  source += "\n@card";
  let sourceMatch;
  const parsed = [];
  while ((sourceMatch = countdownRegex.exec(source)) !== null) {
    const cardColor = toClassArray(sourceMatch[1]);
    parsed.push({
      color: cardColor[0],
      title: sourceMatch[2],
      type: trim(sourceMatch[3]),
      time: trim(sourceMatch[4])
    });
  }
  return parsed;
};

// src/script/ItemContent.ts
var import_obsidian = require("obsidian");
var ItemContent = class {
  constructor(content, element, context, app) {
    this.app = app;
    this.context = context;
    this.content = content;
    this.itemEl = element;
    this.createItemEl(content, context, app);
  }
  createItemEl(content, context, app) {
    var _a;
    this.itemEl = this.itemEl.createDiv();
    const cardComponent = new import_obsidian.MarkdownRenderChild(this.itemEl);
    import_obsidian.MarkdownRenderer.render(
      this.app,
      content,
      this.itemEl,
      (_a = this.context) == null ? void 0 : _a.sourcePath,
      cardComponent
    );
  }
};

// src/script/element/TimelineVElement.ts
var TimelineVElement = class {
  constructor(source, element, context, app) {
    element.className = "container";
    this.app = app;
    this.context = context;
    this.source = source;
    this.element = element;
    this.cardsEl = this.createCardsEl();
  }
  createCardsEl() {
    const TimelineItemInfo = TimeLineParser(this.source);
    const cardsEl = this.element;
    cardsEl.classList.add("timeline-v");
    TimelineItemInfo.forEach((item) => {
      const cardEl = cardsEl.createDiv({
        cls: "timeline-v-item"
      });
      const vlineEl = cardEl.createDiv({
        cls: "vertical-line"
      });
      const timeEl = cardEl.createDiv({
        cls: "timeline-v-time",
        text: item.time
      });
      const contentEl = cardEl.createDiv({
        cls: "timeline-v-content"
      });
      const titleEl = new ItemContent(
        item.title,
        contentEl,
        this.context,
        this.app
      );
      titleEl.itemEl.classList.add("timeline-v-title", "description");
      const descriptionEl = new ItemContent(
        item.content,
        contentEl,
        this.context,
        this.app
      );
      descriptionEl.itemEl.classList.add("timeline-v-description", "description");
      if (item.color !== null && item.color !== void 0) {
        vlineEl.classList.add("line-v-" + item.color);
        contentEl.classList.add("line-v-body-" + item.color);
      } else {
        vlineEl.classList.add("line-v-color-active");
        contentEl.classList.add("line-v-body-color-active");
      }
    });
    return cardsEl;
  }
};

// src/script/element/TimelineHElement.ts
var TimelineHElement = class {
  constructor(source, element, context, app) {
    var _a, _b;
    element.className = "container";
    this.app = app;
    this.context = context;
    this.source = source;
    this.element = element;
    this.cardNum = (_b = (_a = source.match(/@card/gi)) == null ? void 0 : _a.length) != null ? _b : 1;
    this.cardsEl = this.createCardsEl();
  }
  createCardsEl() {
    const TimelineItemInfo = TimeLineParser(this.source);
    const cardsEl = this.element;
    cardsEl.classList.add("timeline-h");
    if (this.cardNum > 0) {
      this.element.classList.add("column-" + this.cardNum);
    }
    TimelineItemInfo.forEach((item) => {
      const cardEl = cardsEl.createDiv({
        cls: "timeline-h-item"
      });
      const timeEl = cardEl.createDiv({
        cls: "timeline-h-time",
        text: item.time
      });
      const hlineEl = cardEl.createDiv({
        cls: "timeline-h-hr"
      });
      const contentEl = cardEl.createDiv({
        cls: "timeline-h-content"
      });
      const titleEl = new ItemContent(
        item.title,
        contentEl,
        this.context,
        this.app
      );
      titleEl.itemEl.classList.add("timeline-h-title", "description");
      const descriptionEl = new ItemContent(
        item.content,
        contentEl,
        this.context,
        this.app
      );
      descriptionEl.itemEl.classList.add(
        "timeline-h-description",
        "description"
      );
      if (item.color !== null && item.color !== void 0) {
        hlineEl.classList.add("line-h-" + item.color);
        contentEl.classList.add("body-" + item.color);
      } else {
        hlineEl.classList.add("line-h-color-active");
        contentEl.classList.add("body-color-active");
      }
    });
    return cardsEl;
  }
};

// src/script/element/HighlightBlockElement.ts
var HighlightBlockElement = class {
  constructor(source, element, context, app) {
    element.className = "container";
    this.app = app;
    this.context = context;
    this.source = source;
    this.element = element;
    this.cardsEl = this.createCardsEl();
  }
  createCardsEl() {
    const HighlightBlockItemInfo = HighlightblockParser(this.source);
    const cardsEl = this.element;
    cardsEl.classList.add("highlightblock");
    HighlightBlockItemInfo.forEach((item) => {
      const cardEl = new ItemContent(
        item.content,
        cardsEl,
        this.context,
        this.app
      );
      cardEl.itemEl.classList.add("highlightblock-item");
      if (item.color !== null && item.color !== void 0) {
        cardEl.itemEl.classList.add("body-" + item.color);
      } else {
        cardEl.itemEl.classList.add("body-color-active");
      }
    });
    return cardsEl;
  }
};

// src/script/element/TargetCardElement.ts
var TargetCardElement = class {
  constructor(source, element, context, app) {
    element.className = "container";
    this.app = app;
    this.context = context;
    this.source = source;
    this.element = element;
    this.cardsEl = this.createCardsEl();
  }
  createCardsEl() {
    const TargetCardItemInfo = TargetCardParser(this.source);
    const cardsEl = this.element;
    cardsEl.classList.add("target-card");
    TargetCardItemInfo.forEach((item) => {
      const cardEl = cardsEl.createDiv({
        cls: "target-card-item"
      });
      const titleEl = cardEl.createDiv({
        cls: "target-card-item-title",
        text: item.title
      });
      const contentEl = cardEl.createDiv({
        cls: "target-card-item-content"
      });
      const numEl = contentEl.createSpan({
        cls: "target-card-item-content-num",
        text: item.value
      });
      const unitEl = contentEl.createSpan({
        cls: "target-card-item-content-unit",
        text: item.unit
      });
      if (item.color !== null && item.color !== void 0) {
        cardEl.classList.add("body-" + item.color);
      } else {
        cardEl.classList.add("body-color-active");
      }
    });
    return cardsEl;
  }
};

// src/script/element/BookCardElement.ts
var BookCardElement = class {
  constructor(source, element, context, app) {
    element.className = "container";
    this.app = app;
    this.context = context;
    this.source = source;
    this.element = element;
    this.cardsEl = this.createCardsEl();
  }
  createCardsEl() {
    const BookCardItemInfo = BookCardParser(this.source);
    const cardsEl = this.element;
    BookCardItemInfo.forEach((item) => {
      const cardEl = cardsEl.createDiv({
        cls: "bookcard-item"
      });
      const style = document.createElement("style");
      const bgImgAttr = document.createTextNode(
        ".bookcard-item::before { background-image: url(" + item.cover + ");}"
      );
      style.appendChild(bgImgAttr);
      document.body.appendChild(style);
      const CardMainEl = cardEl.createDiv({
        cls: "bookcard-main"
      });
      const infoEl = CardMainEl.createDiv({
        cls: "bookcard-main-info"
      });
      const coverEl = infoEl.createDiv({
        cls: "bookcard-info-cover"
      });
      const imgEl = coverEl.createEl("img");
      imgEl.src = item.cover;
      imgEl.alt = "cover";
      imgEl.referrerPolicy = "no-referrer";
      const contentEl = infoEl.createDiv({
        cls: "bookcard-info-content"
      });
      const titleEl = contentEl.createDiv({
        cls: "bookcard-info-content-title",
        text: item.title
      });
      titleEl.classList.add("description");
      const metaEl = new ItemContent(
        item.meta,
        contentEl,
        this.context,
        this.app
      );
      metaEl.itemEl.classList.add("bookcard-info-content-meta");
      const introductionEl = new ItemContent(
        item.introduction,
        CardMainEl,
        this.context,
        this.app
      );
      introductionEl.itemEl.classList.add(
        "bookcard-main-introduction",
        "description"
      );
    });
    return cardsEl;
  }
};

// src/script/element/MusicCardElement.ts
var MusicCardElement = class {
  constructor(source, element, context, app) {
    element.className = "container";
    this.app = app;
    this.context = context;
    this.source = source;
    this.element = element;
    this.cardsEl = this.createCardsEl();
  }
  createCardsEl() {
    const MusicCardItemInfo = MusicCardParser(this.source);
    const cardsEl = this.element;
    MusicCardItemInfo.forEach((item) => {
      const cardEl = cardsEl.createDiv({
        cls: "musiccard-item"
      });
      const style = document.createElement("style");
      const bgImgAttr = document.createTextNode(
        ".musiccard-item::before { background-image: url(" + item.cover + ");}"
      );
      style.appendChild(bgImgAttr);
      document.body.appendChild(style);
      const CardMainEl = cardEl.createDiv({
        cls: "musiccard-main"
      });
      const infoEl = CardMainEl.createDiv({
        cls: "musiccard-main-info"
      });
      const coverEl = infoEl.createDiv({
        cls: "musiccard-info-cover"
      });
      const imgEl = coverEl.createEl("img");
      imgEl.src = item.cover;
      imgEl.alt = "cover";
      imgEl.referrerPolicy = "no-referrer";
      const contentEl = infoEl.createDiv({
        cls: "musiccard-info-content"
      });
      const titleEl = contentEl.createDiv({
        cls: "musiccard-info-content-title",
        text: item.title
      });
      titleEl.classList.add("description");
      const metaEl = new ItemContent(
        item.meta,
        contentEl,
        this.context,
        this.app
      );
      metaEl.itemEl.classList.add("musiccard-info-content-meta");
    });
    return cardsEl;
  }
};

// src/script/element/MovieCardElement.ts
var MovieCardElement = class {
  constructor(source, element, context, app) {
    element.className = "container";
    this.app = app;
    this.context = context;
    this.source = source;
    this.element = element;
    this.cardsEl = this.createCardsEl();
  }
  createCardsEl() {
    const MovieCardItemInfo = MovieCardParser(this.source);
    const cardsEl = this.element;
    MovieCardItemInfo.forEach((item) => {
      const cardEl = cardsEl.createDiv({
        cls: "moviecard-item"
      });
      const style = document.createElement("style");
      const bgImgAttr = document.createTextNode(
        ".moviecard-item::before { background-image: url(" + item.cover + ");}"
      );
      style.appendChild(bgImgAttr);
      document.body.appendChild(style);
      const CardMainEl = cardEl.createDiv({
        cls: "moviecard-main"
      });
      const infoEl = CardMainEl.createDiv({
        cls: "moviecard-main-info"
      });
      const coverEl = infoEl.createDiv({
        cls: "moviecard-info-cover"
      });
      const img = coverEl.createEl("img");
      img.src = item.cover;
      img.alt = "cover";
      img.referrerPolicy = "no-referrer";
      const contentEl = infoEl.createDiv({
        cls: "moviecard-info-content"
      });
      const titleEl = contentEl.createDiv({
        cls: "moviecard-info-content-title",
        text: item.title
      });
      titleEl.classList.add("description");
      const metaEl = new ItemContent(
        item.meta,
        contentEl,
        this.context,
        this.app
      );
      metaEl.itemEl.classList.add("moviecard-info-content-meta");
      const introductionEl = new ItemContent(
        item.introduction,
        CardMainEl,
        this.context,
        this.app
      );
      introductionEl.itemEl.classList.add(
        "moviecard-main-introduction",
        "description"
      );
    });
    return cardsEl;
  }
};

// src/script/element/AlbumCardElement.ts
var AlbumCardElement = class {
  constructor(source, element, context, app) {
    element.className = "container";
    this.app = app;
    this.context = context;
    this.source = source;
    this.element = element;
    this.cardsEl = this.createCardsEl();
  }
  createCardsEl() {
    const AlbumCardItemInfo = AlbumCardParser(this.source);
    const cardsEl = this.element;
    cardsEl.classList.add("album");
    for (let e = 0; e < AlbumCardItemInfo.length; e++) {
      const imagesArray = this.toImagesArray(
        AlbumCardItemInfo[e].images
      );
      const cardEl = cardsEl.createDiv();
      cardEl.classList.add("container", "album-item");
      const titleEl = cardEl.createDiv({
        cls: "album-item-title",
        text: AlbumCardItemInfo[e].title
      });
      if (AlbumCardItemInfo[e].color !== null && AlbumCardItemInfo[e].color !== void 0) {
        titleEl.classList.add("body-" + AlbumCardItemInfo[e].color);
      } else {
        titleEl.classList.add("body-color-active");
      }
      for (let g = 0; g < imagesArray.length; g++) {
        const imagesGirdEl = cardEl.createDiv();
        imagesGirdEl.classList.add(
          "container",
          "album-item-images"
        );
        const ImagesArrayItems = this.toImagesArrayItems(
          imagesArray[g]
        );
        let gridNumber = ImagesArrayItems.length;
        imagesGirdEl.classList.add("grid-" + gridNumber);
        ImagesArrayItems.forEach((item) => {
          const imageItemEl = imagesGirdEl.createDiv({
            cls: "album-item-images-item"
          });
          const imageEl = imageItemEl.createEl("img");
          imageEl.src = item;
          imageEl.alt = "";
          imageEl.referrerPolicy = "no-referrer";
        });
      }
      ;
    }
    ;
    return cardsEl;
  }
  // 以空行分割字符串
  toImagesArray(images) {
    const imagesArrayRegex = /^\s*$/gim;
    if (images === null || images === void 0) {
      return [];
    }
    const imagesArray = images.split(imagesArrayRegex);
    return imagesArray;
  }
  // 以换行符分割字符串
  toImagesArrayItems(imagesArray) {
    const ItemRegex = /\n/;
    imagesArray = imagesArray.trim();
    const ImagesArrayItems = imagesArray.split(ItemRegex);
    return ImagesArrayItems;
  }
};

// src/script/element/SubfieldElement.ts
var SubfieldElement = class {
  constructor(source, element, context, app) {
    var _a, _b;
    element.className = "container";
    this.app = app;
    this.context = context;
    this.source = source;
    this.element = element;
    this.cardNum = (_b = (_a = source.match(/@card/gi)) == null ? void 0 : _a.length) != null ? _b : 1;
    this.cardsEl = this.createCardsEl();
  }
  createCardsEl() {
    const SubfieldItemInfo = subfieldParser(this.source);
    const cardsEl = this.element;
    cardsEl.classList.add("subfield");
    if (this.cardNum > 0) {
      cardsEl.classList.add("column-" + this.cardNum);
    }
    SubfieldItemInfo.forEach((item) => {
      const cardEl = new ItemContent(
        item.content,
        cardsEl,
        this.context,
        this.app
      );
      cardEl.itemEl.classList.add("subfield-item");
    });
    return cardsEl;
  }
};

// src/script/element/NameCardElement.ts
var NameCardElement = class {
  constructor(source, element, context, app) {
    element.className = "container";
    this.app = app;
    this.context = context;
    this.source = source;
    this.element = element;
    this.cardsEl = this.createCardsEl();
  }
  createCardsEl() {
    const NameCardItemInfo = NameCardParser(this.source);
    const cardsEl = this.element;
    cardsEl.classList.add("namecard");
    NameCardItemInfo.forEach((item) => {
      const cardEl = cardsEl.createDiv({
        cls: "namecard-item"
      });
      const infoEl = cardEl.createDiv({
        cls: "namecard-item-info"
      });
      const profileEl = infoEl.createDiv({
        cls: "namecard-item-profile"
      });
      const iconEl = profileEl.createDiv({
        cls: "namecard-item-profile-img",
        text: item.icon
      });
      const contentEl = infoEl.createDiv({
        cls: "namecard-item-content"
      });
      const nameEl = contentEl.createDiv({
        cls: "namecard-item-content-name",
        text: item.name
      });
      const tagsEl = contentEl.createDiv({
        cls: "namecard-item-content-tags",
        text: item.tags
      });
      const remarkEl = cardEl.createDiv({
        cls: "namecard-item-remark",
        text: item.remark
      });
      remarkEl.classList.add("description");
      tagsEl.classList.add("description");
      if (item.color !== null && item.color !== void 0) {
        cardEl.classList.add("body-" + item.color);
        iconEl.classList.add("accent-" + item.color);
      } else {
        cardEl.classList.add("body-color-active");
        iconEl.classList.add("accent-color-active");
      }
    });
    return cardsEl;
  }
};

// src/script/element/CountdownCardElement.ts
var CountdownCardElement = class {
  constructor(source, element, context, app) {
    element.className = "container";
    this.app = app;
    this.context = context;
    this.source = source;
    this.element = element;
    this.timeCount = [0, 0, 0];
    this.currentTime = [0, 0, 0];
    this.targetTime = [0, 0, 0];
    this.timeCountStr = ["0", "0", "0"];
    this.cardsEl = this.createCardsEl();
  }
  createCardsEl() {
    const CountdownCardItemInfo = CountdownCardParser(this.source);
    const cardsEl = this.element;
    cardsEl.classList.add("countdown");
    CountdownCardItemInfo.forEach((item) => {
      const cardEl = cardsEl.createDiv({
        cls: "countdown-item"
      });
      const titleEl = cardEl.createDiv({
        cls: "countdown-item-title"
      });
      titleEl.createSpan({
        text: "\u8DDD\u79BB "
      });
      titleEl.createSpan({
        cls: "countdown-item-count-title",
        text: item.title
      });
      titleEl.createSpan({
        text: " \u8FD8\u6709"
      });
      const countEl = cardEl.createDiv({
        cls: "countdown-item-count"
      });
      this.timeCountStr = this.getTimeCountStr(item.type, item.time);
      if (item.type === "day") {
        const numAEl = countEl.createDiv({
          cls: "countdown-item-count-num",
          text: this.timeCountStr[0]
        });
        const unitAEl = countEl.createDiv({
          cls: "countdown-item-count-unit",
          text: "\u5E74"
        });
        const numBEl = countEl.createDiv({
          cls: "countdown-item-count-num",
          text: this.timeCountStr[1]
        });
        const unitBEl = countEl.createDiv({
          cls: "countdown-item-count-unit",
          text: "\u6708"
        });
        const numCEl = countEl.createDiv({
          cls: "countdown-item-count-num",
          text: this.timeCountStr[2]
        });
        const unitCEl = countEl.createDiv({
          cls: "countdown-item-count-unit",
          text: "\u65E5"
        });
        if (item.color !== null && item.color !== void 0) {
          numAEl.classList.add("accent-" + item.color);
          numBEl.classList.add("accent-" + item.color);
          numCEl.classList.add("accent-" + item.color);
          unitAEl.classList.add("text-" + item.color);
          unitBEl.classList.add("text-" + item.color);
          unitCEl.classList.add("text-" + item.color);
        } else {
          numAEl.classList.add("accent-color-active");
          numBEl.classList.add("accent-color-active");
          numCEl.classList.add("accent-color-active");
          unitAEl.classList.add("text-color-active");
          unitBEl.classList.add("text-color-active");
          unitCEl.classList.add("text-color-active");
        }
      } else if (item.type === "sec") {
        const numAEl = countEl.createDiv({
          cls: "countdown-item-count-num",
          text: this.timeCountStr[0]
        });
        const unitAEl = countEl.createDiv({
          cls: "countdown-item-count-unit",
          text: "\u65F6"
        });
        const numBEl = countEl.createDiv({
          cls: "countdown-item-count-num",
          text: this.timeCountStr[1]
        });
        const unitBEl = countEl.createDiv({
          cls: "countdown-item-count-unit",
          text: "\u5206"
        });
        const numCEl = countEl.createDiv({
          cls: "countdown-item-count-num",
          text: this.timeCountStr[2]
        });
        const unitCEl = countEl.createDiv({
          cls: "countdown-item-count-unit",
          text: "\u79D2"
        });
        if (item.color !== null && item.color !== void 0) {
          numAEl.classList.add("accent-" + item.color);
          numBEl.classList.add("accent-" + item.color);
          numCEl.classList.add("accent-" + item.color);
          unitAEl.classList.add("text-" + item.color);
          unitBEl.classList.add("text-" + item.color);
          unitCEl.classList.add("text-" + item.color);
        } else {
          numAEl.classList.add("accent-color-active");
          numBEl.classList.add("accent-color-active");
          numCEl.classList.add("accent-color-active");
          unitAEl.classList.add("text-color-active");
          unitBEl.classList.add("text-color-active");
          unitCEl.classList.add("text-color-active");
        }
      } else {
        countEl.createDiv({
          cls: "countdown-item-count-unit",
          text: "\u8BF7\u8F93\u5165\u6B63\u786E\u7684\u65F6\u95F4\u7C7B\u578B: day \u6216 sec"
        });
      }
      if (item.color !== null && item.color !== void 0) {
        cardEl.classList.add("body-" + item.color);
      } else {
        cardEl.classList.add("body-color-active");
      }
    });
    return cardsEl;
  }
  getTimeCountStr(type, time) {
    if (type == "day") {
      this.targetTime = time.match(/(\d{4})-(\d{2})-(\d{2})/);
      const targetTime = [this.targetTime[1], this.targetTime[2], this.targetTime[3]];
      const currentTime = [new Date().getFullYear(), new Date().getMonth() + 1, new Date().getDate()];
      const timeDiff = (targetTime[0] - currentTime[0]) * 365 + (targetTime[1] - currentTime[1]) * 30 + (targetTime[2] - currentTime[2]);
      if (timeDiff > 0) {
        this.timeCount[0] = Math.floor(timeDiff / 365);
        this.timeCount[1] = Math.floor(timeDiff % 365 / 30);
        this.timeCount[2] = Math.floor(timeDiff % 30);
      } else {
        this.timeCount = [0, 0, 0];
      }
    } else if (type == "sec") {
      this.targetTime = time.match(/(\d{2}):(\d{2}):(\d{2})/);
      const targetTime = [this.targetTime[1], this.targetTime[2], this.targetTime[3]];
      const currentTime = [new Date().getHours(), new Date().getMinutes(), new Date().getSeconds()];
      const timeDiff = (targetTime[0] - currentTime[0]) * 60 * 60 + (targetTime[1] - currentTime[1]) * 60 + (targetTime[2] - currentTime[2]);
      if (timeDiff > 0) {
        this.timeCount[0] = Math.floor(timeDiff / 60 / 60);
        this.timeCount[1] = Math.floor(timeDiff % 60 / 60);
        this.timeCount[2] = Math.floor(timeDiff % 60);
      } else {
        this.timeCount = [0, 0, 0];
      }
    } else {
      this.timeCount = [0, 0, 0];
    }
    this.timeCount.forEach((e) => {
      this.timeCountStr = this.timeCount.map((e2) => {
        return this.toString(e2);
      });
    });
    return this.timeCountStr;
  }
  toString(num) {
    let numStr = num.toString();
    return numStr;
  }
};

// src/script/TagContainer.ts
var TagContainer = class {
  constructor(tag, source, element, context, app) {
    this.source = source;
    this.app = app;
    this.context = context;
    this.element = element;
    switch (tag) {
      case "cards-timeline-v":
        new TimelineVElement(source, element, context, this.app);
        break;
      case "cards-timeline-h":
        new TimelineHElement(source, element, context, this.app);
        break;
      case "cards-highlightblock":
        new HighlightBlockElement(source, element, context, this.app);
        break;
      case "cards-target":
        new TargetCardElement(source, element, context, this.app);
        break;
      case "cards-book":
        new BookCardElement(source, element, context, this.app);
        break;
      case "cards-music":
        new MusicCardElement(source, element, context, this.app);
        break;
      case "cards-movie":
        new MovieCardElement(source, element, context, this.app);
        break;
      case "cards-album":
        new AlbumCardElement(source, element, context, this.app);
        break;
      case "cards-subfield":
        new SubfieldElement(source, element, context, this.app);
        break;
      case "cards-name":
        new NameCardElement(source, element, context, this.app);
        break;
      case "cards-countdown":
        new CountdownCardElement(source, element, context, this.app);
        break;
      default:
        break;
    }
  }
};

// src/script/main.ts
var language = [
  "cards-timeline-v",
  "cards-timeline-h",
  "cards-highlightblock",
  "cards-target",
  "cards-book",
  "cards-music",
  "cards-movie",
  "cards-album",
  "cards-subfield",
  "cards-name",
  "cards-countdown"
];
var ContentCardsPlugin = class extends import_obsidian2.Plugin {
  async onload() {
    language.forEach((tag) => {
      this.registerMarkdownCodeBlockProcessor(
        tag,
        (source, root, ctx) => {
          new TagContainer(tag, source, root, ctx, this.app);
        }
      );
    });
    console.log("loading content cards plugin");
  }
  async onunload() {
    console.log("unloading content cards plugin");
  }
};
//# sourceMappingURL=data:application/json;base64,
